import { NextRequest, NextResponse } from "next/server";
import { connectMongoDB } from "@/lib/mongodb";
import  Calendar from "@/models/Calendar"; // ‚úÖ Import Model

// üìå POST Method: ‡πÄ‡∏û‡∏¥‡πà‡∏° Diary Entry
export async function POST(req: NextRequest) {
  try {
    await connectMongoDB();
    const { emotion, story, isStarred } = await req.json();
    const date = new Date().toISOString(); // ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    if (!date || !emotion || !story) {
      return NextResponse.json({ message: "Missing required fields" }, { status: 400 });
    }

    const newEntry = new  Calendar({ date, emotion, story, isStarred });
    await newEntry.save();

    return NextResponse.json({ message: "Entry saved", newEntry }, { status: 201 });
  } catch (error) {
    console.error("Error saving entry:", error);
    return NextResponse.json({ message: "Internal Server Error" }, { status: 500 });
  }
}

// üìå GET Method: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å MongoDB
export async function GET() {
  try {
    await connectMongoDB();
    const entries = await  Calendar.find().sort({ date: -1 }); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
    return NextResponse.json(entries, { status: 200 });
  } catch (error) {
    console.error("Error fetching entries:", error);
    return NextResponse.json({ message: "Internal Server Error" }, { status: 500 });
  }
}
